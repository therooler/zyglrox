# Copyright 2020 Roeland Wiersema
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO: These should also output the positions on the triangular lattice for nice plotting!

def graph_kagome_12(boundary_condition='open'):
    if boundary_condition == 'open':
        model_graph = {0: [[0, 11], [0, 1]], 1: [[1, 0], [1, 11], [1, 2], [1, 3]],
                       2: [[2, 1], [2, 3]], 3: [[3, 1], [3, 2], [3, 4], [3, 5]],
                       4: [[4, 3], [4, 5]], 5: [[5, 3], [5, 4], [5, 6], [5, 7]],
                       6: [[6, 5], [6, 7]], 7: [[7, 5], [7, 6], [7, 8], [7, 9]],
                       8: [[8, 7], [8, 9]], 9: [[9, 7], [9, 8], [9, 10], [9, 11]],
                       10: [[10, 9], [10, 11]], 11: [[11, 9], [11, 10], [11, 0], [11, 1]]}
        return model_graph
    elif boundary_condition == 'torus':
        model_graph = {0: [[0, 2], [0, 1]] + [[0, 10], [0, 5]], 1: [[1, 0], [1, 8], [1, 2]] + [[1, 11]],
                       2: [[2, 1], [2, 3], [2, 0]] + [[2, 7]], 3: [[3, 2], [3, 4], [3, 5]] + [[3, 7]],
                       4: [[4, 3], [4, 5], [4, 6], [4, 9]], 5: [[5, 3], [5, 4]] + [[5, 0], [5, 10]],
                       6: [[6, 4], [6, 7], [6, 8], [6, 9]], 7: [[7, 6], [7, 8]] + [[7, 3], [7, 2]],
                       8: [[8, 1], [8, 6], [8, 7]] + [[8, 11]], 9: [[9, 4], [9, 6], [9, 10], [9, 11]],
                       10: [[10, 9], [10, 11]] + [[10, 0], [10, 5]], 11: [[11, 9], [11, 10]] + [[11, 1], [11, 8]]}
        return model_graph


def graph_kagome_18b(boundary_condition='open'):
    if boundary_condition == 'open':
        model_graph = {0: [[0, 1]], 1: [[1, 0], [1, 2], [1, 4]],
                       2: [[2, 1], [2, 3], [2, 4], [2, 5]], 3: [[3, 2], [3, 5]],
                       4: [[4, 1], [4, 2], [4, 6], [4, 7]], 5: [[5, 3], [5, 2], [5, 9]],
                       6: [[6, 4], [6, 7]], 7: [[7, 4], [7, 6], [7, 8], [7, 11]],
                       8: [[8, 7], [8, 9], [8, 10], [8, 11]], 9: [[9, 5], [9, 8], [9, 10]],
                       10: [[10, 9], [10, 8], [10, 15]], 11: [[11, 7], [11, 8], [11, 12], [11, 13]],
                       12: [[12, 11], [12, 13]], 13: [[13, 11], [13, 12], [13, 14], [13, 17]],
                       14: [[14, 13], [14, 15], [14, 16], [14, 17]], 15: [[15, 10], [15, 14], [15, 16]],
                       16: [[16, 14], [16, 15]], 17: [[17, 14], [17, 13]]}
        return model_graph
    if boundary_condition == 'torus':
        model_graph = {0: [[0, 1], [0, 3], [0, 16], [0, 17]], 1: [[1, 0], [1, 2], [1, 4], [1, 17]],
                       2: [[2, 1], [2, 3], [2, 4], [2, 5]], 3: [[3, 2], [3, 5], [3, 0], [3, 16]],
                       4: [[4, 1], [4, 2], [4, 6], [4, 7]], 5: [[5, 3], [5, 2], [5, 9], [5, 6]],
                       6: [[6, 4], [6, 7], [6, 5], [6, 9]], 7: [[7, 4], [7, 6], [7, 8], [7, 11]],
                       8: [[8, 7], [8, 9], [8, 10], [8, 11]], 9: [[9, 5], [9, 8], [9, 10], [9, 6]],
                       10: [[10, 9], [10, 8], [10, 15], [10, 12]], 11: [[11, 7], [11, 8], [11, 12], [11, 13]],
                       12: [[12, 11], [12, 13], [12, 10], [12, 15]], 13: [[13, 11], [13, 12], [13, 14], [13, 17]],
                       14: [[14, 13], [14, 15], [14, 16], [14, 17]], 15: [[15, 10], [15, 14], [15, 16], [15, 12]],
                       16: [[16, 14], [16, 15], [16, 0], [16, 3]], 17: [[17, 14], [17, 13], [17, 1], [17, 0]]}
        return model_graph


def graph_kagome_24(boundary_condition='open'):
    if boundary_condition == 'open':
        model_graph = {0: [[0, 1], [0, 2]], 1: [[1, 0], [1, 3]],
                       2: [[2, 0], [2, 5], [2, 6]], 3: [[3, 1], [3, 7], [3, 8]],
                       4: [[4, 10], [4, 5]], 5: [[5, 2], [5, 6], [5, 4], [5, 10]],
                       6: [[6, 2], [6, 5], [6, 7], [6, 11]], 7: [[7, 3], [7, 8], [7, 6], [7, 11]],
                       8: [[8, 3], [8, 7], [8, 12], [8, 9]], 9: [[9, 8], [9, 12]],
                       10: [[10, 4], [10, 5], [10, 13], [10, 14]], 11: [[11, 6], [11, 7], [11, 15], [11, 16]],
                       12: [[12, 8], [12, 9], [12, 17], [12, 18]], 13: [[13, 10], [13, 14]],
                       14: [[14, 10], [14, 13], [14, 15], [14, 19]], 15: [[15, 11], [15, 16], [15, 14], [15, 19]],
                       16: [[16, 11], [16, 15], [16, 17], [16, 20]], 17: [[17, 12], [17, 18], [17, 16], [17, 20]],
                       18: [[18, 17], [18, 12]], 19: [[19, 14], [19, 15], [19, 21]],
                       20: [[20, 16], [20, 17], [20, 22]], 21: [[21, 19], [21, 22], [21, 23]],
                       22: [[22, 20], [22, 21], [22, 23]], 23: [[23, 21], [23, 22]]}
        return model_graph
    elif boundary_condition == 'torus':
        model_graph = {0: [[0, 1], [0, 2], [0, 18], [0, 23]], 1: [[1, 0], [1, 3], [1, 23], [1, 13]],
                       2: [[2, 0], [2, 5], [2, 6], [2, 18]], 3: [[3, 1], [3, 7], [3, 8], [3, 13]],
                       4: [[4, 10], [4, 5], [4, 20], [4, 22]], 5: [[5, 2], [5, 6], [5, 4], [5, 10]],
                       6: [[6, 2], [6, 5], [6, 7], [6, 11]], 7: [[7, 3], [7, 8], [7, 6], [7, 11]],
                       8: [[8, 3], [8, 7], [8, 12], [8, 9]], 9: [[9, 8], [9, 12], [9, 19], [9, 21]],
                       10: [[10, 4], [10, 5], [10, 13], [10, 14]], 11: [[11, 6], [11, 7], [11, 15], [11, 16]],
                       12: [[12, 8], [12, 9], [12, 17], [12, 18]], 13: [[13, 10], [13, 14], [13, 1], [13, 3]],
                       14: [[14, 10], [14, 13], [14, 15], [14, 19]], 15: [[15, 11], [15, 16], [15, 14], [15, 19]],
                       16: [[16, 11], [16, 15], [16, 17], [16, 20]], 17: [[17, 12], [17, 18], [17, 16], [17, 20]],
                       18: [[18, 17], [18, 12], [18, 0], [18, 2]], 19: [[19, 14], [19, 15], [19, 21], [19, 9]],
                       20: [[20, 16], [20, 17], [20, 22], [20, 4]], 21: [[21, 19], [21, 22], [21, 23], [21, 9]],
                       22: [[22, 20], [22, 21], [22, 23], [22, 4]], 23: [[23, 21], [23, 22], [23, 0], [23, 1]]}

        return model_graph


def graph_honeycomb_8(link=None):
    if link == None:
        return {0: [[0, 1], [0, 2], [0, 6]], 1: [[1, 0], [1, 3], [1, 7]],
                2: [[2, 0], [2, 4], [2, 3]], 3: [[3, 1], [3, 5], [3, 2]],
                4: [[4, 2], [4, 5], [4, 6]], 5: [[5, 3], [5, 4], [5, 7]],
                6: [[6, 4], [6, 7], [6, 0]], 7: [[7, 6], [7, 5], [7, 1]]}
    else:
        if link == 'xx':  # green
            return {0: [[0, 1]], 3: [[3, 2]], 4: [[4, 5]]}
        elif link == 'yy':  # yellow
            return {1: [[1, 3]], 2: [[2, 4]], 6: [[6, 0]]}
        elif link == 'zz':  # blue
            return {0: [[0, 2]], 3: [[3, 5]], 4: [[4, 6]]}
        else:
            raise ValueError('Link must be xx, yy or zz')


def graph_honeycomb_16(link=None):
    if link == None:
        return {0: [[0, 1], [0, 4], [0, 12]], 1: [[1, 0], [1, 5], [1, 13]],
                2: [[2, 6], [2, 3], [2, 14]], 3: [[3, 2], [3, 7], [3, 15]],
                4: [[4, 0], [4, 8], [4, 7]], 5: [[5, 1], [5, 6], [5, 9]],
                6: [[6, 2], [6, 5], [6, 10]], 7: [[7, 3], [7, 4], [7, 11]],
                8: [[8, 4], [8, 12], [8, 9]], 9: [[9, 8], [9, 5], [9, 13]],
                10: [[10, 6], [10, 14], [10, 11]], 11: [[11, 10], [11, 7], [11, 15]],
                12: [[12, 8], [12, 0], [12, 15]], 13: [[13, 9], [13, 1], [13, 14]],
                14: [[14, 13], [14, 10], [14, 2]], 15: [[15, 3], [15, 11], [15, 12]]}
    else:
        if link == 'xx':  # green
            return {0: [[0, 1]], 8: [[8, 9]], 5: [[5, 6]], 13: [[13, 14]],
                    2: [[2, 3]], 10: [[10, 11]], 7: [[7, 4]], 15: [[15, 12]]}
        elif link == 'yy':  # yellow
            return {1: [[1, 5]], 4: [[4, 8]], 12: [[12, 0]], 9: [[9, 13]],
                    6: [[6, 10]], 3: [[3, 7]], 11: [[11, 15]], 14: [[14, 2]]}
        elif link == 'zz':  # blue
            return {0: [[0, 4]], 2: [[2, 6]], 5: [[5, 9]], 7: [[7, 11]],
                    8: [[8, 12]], 13: [[13, 1]], 10: [[10, 14]], 15: [[15, 3]]}
        else:
            raise ValueError('Link must be xx, yy or zz')


def graph_ladder(L: int, link=None, boundary_condition='open'):
    topology = {}
    if boundary_condition == 'closed':
        assert L / 2 == L // 2, f"L must be even, found {L}"
    if link == None:
        for i in range(0, 2 * L - 2, 2):
            topology[i] = [[i, i + 1], [i, i + 2]]
            topology[i + 1] = [[i + 1, i], [i + 1, i + 3]]
        topology[2 * L - 1] = [[2 * L - 1, 2 * L - 2]]
        if boundary_condition == 'closed':
            topology[2 * L - 1].append([2 * L - 1, 1])
            topology[2 * L - 2] = [[2 * L - 2, 0]]
        return topology
    else:
        if link == 'zz':  # rungs
            for i in range(0, 2 * L - 2, 2):
                topology[i] = [[i, i + 1], ]
            topology[2 * L - 1] = [[2 * L - 1, 2 * L - 2]]
            return topology

        if link == 'yy':  # green
            for i in range(3, 2 * L - 2, 4):
                topology[i] = [[i, i + 2], ]
            for i in range(0, 2 * L - 1, 4):
                topology[i] = [[i, i + 2], ]
            if boundary_condition == 'closed':
                topology[2 * L - 1] = [[2 * L - 1, 1]]

            return topology

        elif link == 'xx':  # blue
            for i in range(2, 2 * L - 2, 4):
                topology[i] = [[i, i + 2], ]
            for i in range(1, 2 * L - 1, 4):
                topology[i] = [[i, i + 2], ]
            if boundary_condition == 'closed':
                topology[2 * L - 2] = [[2 * L - 2, 0]]

            return topology
        else:
            raise ValueError('Link must be xx or zz')


def graph_honeycomb_13():
    model_graph = {0: [[0, 1], [0, 5]], 1: [[1, 2], [1, 0]], 2: [[2, 1], [2, 3]], 3: [[3, 2], [3, 4]],
                   4: [[4, 3], [4, 5]], 5: [[5, 0], [5, 4]]}
    return model_graph


# TODO remove at some point:
def graph_kagome_18b_torus():
    model_graph = {0: [[0, 1], [0, 3], [0, 16], [0, 17]], 1: [[1, 0], [1, 2], [1, 4], [1, 17]],
                   2: [[2, 1], [2, 3], [2, 4], [2, 5]], 3: [[3, 2], [3, 5], [3, 0], [3, 16]],
                   4: [[4, 1], [4, 2], [4, 6], [4, 7]], 5: [[5, 3], [5, 2], [5, 9], [5, 6]],
                   6: [[6, 4], [6, 7], [6, 5], [6, 9]], 7: [[7, 4], [7, 6], [7, 8], [7, 11]],
                   8: [[8, 7], [8, 9], [8, 10], [8, 11]], 9: [[9, 5], [9, 8], [9, 10], [9, 6]],
                   10: [[10, 9], [10, 8], [10, 15], [10, 12]], 11: [[11, 7], [11, 8], [11, 12], [11, 13]],
                   12: [[12, 11], [12, 13], [12, 10], [12, 15]], 13: [[13, 11], [13, 12], [13, 14], [13, 17]],
                   14: [[14, 13], [14, 15], [14, 16], [14, 17]], 15: [[15, 10], [15, 14], [15, 16], [15, 12]],
                   16: [[16, 14], [16, 15], [16, 0], [16, 3]], 17: [[17, 14], [17, 13], [17, 1], [17, 0]]}
    return model_graph


def graph_kagome_12_torus():
    model_graph = {0: [[0, 2], [0, 1]] + [[0, 10], [0, 5]], 1: [[1, 0], [1, 8], [1, 2]] + [[1, 11]],
                   2: [[2, 1], [2, 3], [2, 0]] + [[2, 7]], 3: [[3, 2], [3, 4], [3, 5]] + [[3, 7]],
                   4: [[4, 3], [4, 5], [4, 6], [4, 9]], 5: [[5, 3], [5, 4]] + [[5, 0], [5, 10]],
                   6: [[6, 4], [6, 7], [6, 8], [6, 9]], 7: [[7, 6], [7, 8]] + [[7, 3], [7, 2]],
                   8: [[8, 1], [8, 6], [8, 7]] + [[8, 11]], 9: [[9, 4], [9, 6], [9, 10], [9, 11]],
                   10: [[10, 9], [10, 11]] + [[10, 0], [10, 5]], 11: [[11, 9], [11, 10]] + [[11, 1], [11, 8]]}
    return model_graph


def graph_kagome_24_torus():
    model_graph = {0: [[0, 1], [0, 2], [0, 18], [0, 23]], 1: [[1, 0], [1, 3], [1, 23], [1, 13]],
                   2: [[2, 0], [2, 5], [2, 6], [2, 18]], 3: [[3, 1], [3, 7], [3, 8], [3, 13]],
                   4: [[4, 10], [4, 5], [4, 20], [4, 22]], 5: [[5, 2], [5, 6], [5, 4], [5, 10]],
                   6: [[6, 2], [6, 5], [6, 7], [6, 11]], 7: [[7, 3], [7, 8], [7, 6], [7, 11]],
                   8: [[8, 3], [8, 7], [8, 12], [8, 9]], 9: [[9, 8], [9, 12], [9, 19], [9, 21]],
                   10: [[10, 4], [10, 5], [10, 13], [10, 14]], 11: [[11, 6], [11, 7], [11, 15], [11, 16]],
                   12: [[12, 8], [12, 9], [12, 17], [12, 18]], 13: [[13, 10], [13, 14], [13, 1], [13, 3]],
                   14: [[14, 10], [14, 13], [14, 15], [14, 19]], 15: [[15, 11], [15, 16], [15, 14], [15, 19]],
                   16: [[16, 11], [16, 15], [16, 17], [16, 20]], 17: [[17, 12], [17, 18], [17, 16], [17, 20]],
                   18: [[18, 17], [18, 12], [18, 0], [18, 2]], 19: [[19, 14], [19, 15], [19, 21], [19, 9]],
                   20: [[20, 16], [20, 17], [20, 22], [20, 4]], 21: [[21, 19], [21, 22], [21, 23], [21, 9]],
                   22: [[22, 20], [22, 21], [22, 23], [22, 4]], 23: [[23, 21], [23, 22], [23, 0], [23, 1]]}
    return model_graph


def graph_kagome_27():
    model_graph = {0: [[0, 1], [0, 6]], 1: [[1, 0], [1, 2], [1, 6]],
                   2: [[2, 1], [2, 3], [2, 7]], 3: [[3, 2], [3, 4], [3, 7]],
                   4: [[4, 3], [4, 5], [4, 8]], 5: [[5, 4], [5, 8]],
                   6: [[6, 0], [6, 1], [6, 10], [6, 11]], 7: [[7, 2], [7, 3], [7, 12], [7, 13]],
                   8: [[8, 5], [8, 4], [8, 14]], 9: [[9, 10], [9, 15]],
                   10: [[10, 6], [10, 11], [10, 9], [10, 15]], 11: [[11, 6], [11, 10], [11, 12], [11, 16]],
                   12: [[12, 7], [12, 13], [12, 11], [12, 16]], 13: [[13, 7], [13, 12], [13, 14], [13, 17]],
                   14: [[14, 8], [14, 13], [14, 17]], 15: [[15, 9], [15, 10], [15, 19], [15, 20]],
                   16: [[16, 11], [16, 12], [16, 21], [16, 22]], 17: [[17, 13], [17, 14], [17, 23]],
                   18: [[18, 19], [18, 24]], 19: [[19, 15], [19, 20], [19, 18], [19, 24]],
                   20: [[20, 15], [20, 19], [20, 21], [20, 25]], 21: [[21, 16], [21, 20], [21, 25], [21, 22]],
                   22: [[22, 16], [22, 21], [22, 23], [22, 26]], 23: [[23, 17], [23, 22], [23, 26]],
                   24: [[24, 18], [24, 19]], 25: [[25, 20], [25, 21]],
                   26: [[26, 22], [26, 23]]}
    return model_graph
